# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class ApplePayDecryptedTokenData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the Payment data obtained by decrypting Apple Pay token.
    """


    class MetaOapg:
        required = {
            "tokenized_card",
        }
        
        class properties:
        
            @staticmethod
            def tokenized_card() -> typing.Type['Card']:
                return Card
        
            @staticmethod
            def transaction_amount() -> typing.Type['Money2']:
                return Money2
            
            
            class device_manufacturer_id(
                schemas.StrSchema
            ):
                pass
            
            
            class payment_data_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def _3DSECURE(cls):
                    return cls("3DSECURE")
                
                @schemas.classproperty
                def EMV(cls):
                    return cls("EMV")
        
            @staticmethod
            def payment_data() -> typing.Type['ApplePayPaymentData']:
                return ApplePayPaymentData
            __annotations__ = {
                "tokenized_card": tokenized_card,
                "transaction_amount": transaction_amount,
                "device_manufacturer_id": device_manufacturer_id,
                "payment_data_type": payment_data_type,
                "payment_data": payment_data,
            }
    
    tokenized_card: 'Card'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenized_card"]) -> 'Card': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_amount"]) -> 'Money2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_manufacturer_id"]) -> MetaOapg.properties.device_manufacturer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_data_type"]) -> MetaOapg.properties.payment_data_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_data"]) -> 'ApplePayPaymentData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenized_card", "transaction_amount", "device_manufacturer_id", "payment_data_type", "payment_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenized_card"]) -> 'Card': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_amount"]) -> typing.Union['Money2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_manufacturer_id"]) -> typing.Union[MetaOapg.properties.device_manufacturer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_data_type"]) -> typing.Union[MetaOapg.properties.payment_data_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_data"]) -> typing.Union['ApplePayPaymentData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenized_card", "transaction_amount", "device_manufacturer_id", "payment_data_type", "payment_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tokenized_card: 'Card',
        transaction_amount: typing.Union['Money2', schemas.Unset] = schemas.unset,
        device_manufacturer_id: typing.Union[MetaOapg.properties.device_manufacturer_id, str, schemas.Unset] = schemas.unset,
        payment_data_type: typing.Union[MetaOapg.properties.payment_data_type, str, schemas.Unset] = schemas.unset,
        payment_data: typing.Union['ApplePayPaymentData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplePayDecryptedTokenData':
        return super().__new__(
            cls,
            *args,
            tokenized_card=tokenized_card,
            transaction_amount=transaction_amount,
            device_manufacturer_id=device_manufacturer_id,
            payment_data_type=payment_data_type,
            payment_data=payment_data,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.apple_pay_payment_data import ApplePayPaymentData
from pay_pal_checkout_python_sdk.model.card import Card
from pay_pal_checkout_python_sdk.model.money2 import Money2
