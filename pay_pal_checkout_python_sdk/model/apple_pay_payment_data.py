# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class ApplePayPaymentData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the decrypted apple pay payment data for the token like cryptogram, eci indicator.
    """


    class MetaOapg:
        
        class properties:
            
            
            class cryptogram(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2000
                    min_length = 1
                    regex=[{
                        'pattern': r'^.*$',
                    }]
            
            
            class eci_indicator(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 256
                    min_length = 1
                    regex=[{
                        'pattern': r'^.*$',
                    }]
            
            
            class emv_data(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2000
                    min_length = 1
                    regex=[{
                        'pattern': r'^.*$',
                    }]
            
            
            class pin(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2000
                    min_length = 1
                    regex=[{
                        'pattern': r'^.*$',
                    }]
            __annotations__ = {
                "cryptogram": cryptogram,
                "eci_indicator": eci_indicator,
                "emv_data": emv_data,
                "pin": pin,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cryptogram"]) -> MetaOapg.properties.cryptogram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eci_indicator"]) -> MetaOapg.properties.eci_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emv_data"]) -> MetaOapg.properties.emv_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pin"]) -> MetaOapg.properties.pin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cryptogram", "eci_indicator", "emv_data", "pin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cryptogram"]) -> typing.Union[MetaOapg.properties.cryptogram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eci_indicator"]) -> typing.Union[MetaOapg.properties.eci_indicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emv_data"]) -> typing.Union[MetaOapg.properties.emv_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pin"]) -> typing.Union[MetaOapg.properties.pin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cryptogram", "eci_indicator", "emv_data", "pin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cryptogram: typing.Union[MetaOapg.properties.cryptogram, str, schemas.Unset] = schemas.unset,
        eci_indicator: typing.Union[MetaOapg.properties.eci_indicator, str, schemas.Unset] = schemas.unset,
        emv_data: typing.Union[MetaOapg.properties.emv_data, str, schemas.Unset] = schemas.unset,
        pin: typing.Union[MetaOapg.properties.pin, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplePayPaymentData':
        return super().__new__(
            cls,
            *args,
            cryptogram=cryptogram,
            eci_indicator=eci_indicator,
            emv_data=emv_data,
            pin=pin,
            _configuration=_configuration,
            **kwargs,
        )
