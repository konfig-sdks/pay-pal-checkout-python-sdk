# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class ApplePayRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information needed to pay using ApplePay.
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 250
                    min_length = 1
                    regex=[{
                        'pattern': r'^.*$',
                    }]
        
            @staticmethod
            def name() -> typing.Type['FullName']:
                return FullName
        
            @staticmethod
            def email_address() -> typing.Type['EmailAddress']:
                return EmailAddress
        
            @staticmethod
            def phone_number() -> typing.Type['Phone']:
                return Phone
        
            @staticmethod
            def decrypted_token() -> typing.Type['ApplePayDecryptedTokenData']:
                return ApplePayDecryptedTokenData
        
            @staticmethod
            def stored_credential() -> typing.Type['CardStoredCredential']:
                return CardStoredCredential
        
            @staticmethod
            def vault_id() -> typing.Type['VaultId']:
                return VaultId
            attributes = schemas.AnyTypeSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "email_address": email_address,
                "phone_number": phone_number,
                "decrypted_token": decrypted_token,
                "stored_credential": stored_credential,
                "vault_id": vault_id,
                "attributes": attributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'FullName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_address"]) -> 'EmailAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> 'Phone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decrypted_token"]) -> 'ApplePayDecryptedTokenData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stored_credential"]) -> 'CardStoredCredential': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vault_id"]) -> 'VaultId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "email_address", "phone_number", "decrypted_token", "stored_credential", "vault_id", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['FullName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_address"]) -> typing.Union['EmailAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union['Phone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decrypted_token"]) -> typing.Union['ApplePayDecryptedTokenData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stored_credential"]) -> typing.Union['CardStoredCredential', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vault_id"]) -> typing.Union['VaultId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "email_address", "phone_number", "decrypted_token", "stored_credential", "vault_id", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union['FullName', schemas.Unset] = schemas.unset,
        email_address: typing.Union['EmailAddress', schemas.Unset] = schemas.unset,
        phone_number: typing.Union['Phone', schemas.Unset] = schemas.unset,
        decrypted_token: typing.Union['ApplePayDecryptedTokenData', schemas.Unset] = schemas.unset,
        stored_credential: typing.Union['CardStoredCredential', schemas.Unset] = schemas.unset,
        vault_id: typing.Union['VaultId', schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplePayRequest':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            email_address=email_address,
            phone_number=phone_number,
            decrypted_token=decrypted_token,
            stored_credential=stored_credential,
            vault_id=vault_id,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.apple_pay_decrypted_token_data import ApplePayDecryptedTokenData
from pay_pal_checkout_python_sdk.model.card_stored_credential import CardStoredCredential
from pay_pal_checkout_python_sdk.model.email_address import EmailAddress
from pay_pal_checkout_python_sdk.model.full_name import FullName
from pay_pal_checkout_python_sdk.model.phone import Phone
from pay_pal_checkout_python_sdk.model.vault_id import VaultId
