# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class AuthenticationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Results of Authentication such as 3D Secure.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def liability_shift() -> typing.Type['LiabilityShift']:
                return LiabilityShift
        
            @staticmethod
            def three_d_secure() -> typing.Type['ThreeDSecureAuthenticationResponse']:
                return ThreeDSecureAuthenticationResponse
            authentication_flow = schemas.AnyTypeSchema
            exemption_details = schemas.AnyTypeSchema
            __annotations__ = {
                "liability_shift": liability_shift,
                "three_d_secure": three_d_secure,
                "authentication_flow": authentication_flow,
                "exemption_details": exemption_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liability_shift"]) -> 'LiabilityShift': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["three_d_secure"]) -> 'ThreeDSecureAuthenticationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_flow"]) -> MetaOapg.properties.authentication_flow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exemption_details"]) -> MetaOapg.properties.exemption_details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["liability_shift", "three_d_secure", "authentication_flow", "exemption_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liability_shift"]) -> typing.Union['LiabilityShift', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["three_d_secure"]) -> typing.Union['ThreeDSecureAuthenticationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_flow"]) -> typing.Union[MetaOapg.properties.authentication_flow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exemption_details"]) -> typing.Union[MetaOapg.properties.exemption_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["liability_shift", "three_d_secure", "authentication_flow", "exemption_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        liability_shift: typing.Union['LiabilityShift', schemas.Unset] = schemas.unset,
        three_d_secure: typing.Union['ThreeDSecureAuthenticationResponse', schemas.Unset] = schemas.unset,
        authentication_flow: typing.Union[MetaOapg.properties.authentication_flow, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        exemption_details: typing.Union[MetaOapg.properties.exemption_details, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthenticationResponse':
        return super().__new__(
            cls,
            *args,
            liability_shift=liability_shift,
            three_d_secure=three_d_secure,
            authentication_flow=authentication_flow,
            exemption_details=exemption_details,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.liability_shift import LiabilityShift
from pay_pal_checkout_python_sdk.model.three_d_secure_authentication_response import ThreeDSecureAuthenticationResponse
