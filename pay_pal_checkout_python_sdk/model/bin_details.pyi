# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class BinDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Bank Identification Number (BIN) details used to fund a payment.
    """


    class MetaOapg:
        
        class properties:
            
            
            class bin(
                schemas.StrSchema
            ):
                pass
            
            
            class issuing_bank(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def bin_country_code() -> typing.Type['CountryCode']:
                return CountryCode
        
            @staticmethod
            def products() -> typing.Type['BinDetailsProducts']:
                return BinDetailsProducts
            __annotations__ = {
                "bin": bin,
                "issuing_bank": issuing_bank,
                "bin_country_code": bin_country_code,
                "products": products,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin"]) -> MetaOapg.properties.bin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuing_bank"]) -> MetaOapg.properties.issuing_bank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin_country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> 'BinDetailsProducts': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bin", "issuing_bank", "bin_country_code", "products", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin"]) -> typing.Union[MetaOapg.properties.bin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuing_bank"]) -> typing.Union[MetaOapg.properties.issuing_bank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin_country_code"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union['BinDetailsProducts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bin", "issuing_bank", "bin_country_code", "products", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bin: typing.Union[MetaOapg.properties.bin, str, schemas.Unset] = schemas.unset,
        issuing_bank: typing.Union[MetaOapg.properties.issuing_bank, str, schemas.Unset] = schemas.unset,
        bin_country_code: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        products: typing.Union['BinDetailsProducts', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BinDetails':
        return super().__new__(
            cls,
            *args,
            bin=bin,
            issuing_bank=issuing_bank,
            bin_country_code=bin_country_code,
            products=products,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.bin_details_products import BinDetailsProducts
from pay_pal_checkout_python_sdk.model.country_code import CountryCode
