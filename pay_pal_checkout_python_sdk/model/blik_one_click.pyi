# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class BlikOneClick(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information used to pay using BLIK one-click flow.
    """


    class MetaOapg:
        required = {
            "consumer_reference",
        }
        
        class properties:
            
            
            class consumer_reference(
                schemas.StrSchema
            ):
                pass
            
            
            class auth_code(
                schemas.StrSchema
            ):
                pass
            
            
            class alias_label(
                schemas.StrSchema
            ):
                pass
            
            
            class alias_key(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "consumer_reference": consumer_reference,
                "auth_code": auth_code,
                "alias_label": alias_label,
                "alias_key": alias_key,
            }
    
    consumer_reference: MetaOapg.properties.consumer_reference
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consumer_reference"]) -> MetaOapg.properties.consumer_reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_code"]) -> MetaOapg.properties.auth_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias_label"]) -> MetaOapg.properties.alias_label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias_key"]) -> MetaOapg.properties.alias_key: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["consumer_reference", "auth_code", "alias_label", "alias_key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consumer_reference"]) -> MetaOapg.properties.consumer_reference: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_code"]) -> typing.Union[MetaOapg.properties.auth_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias_label"]) -> typing.Union[MetaOapg.properties.alias_label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias_key"]) -> typing.Union[MetaOapg.properties.alias_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["consumer_reference", "auth_code", "alias_label", "alias_key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        consumer_reference: typing.Union[MetaOapg.properties.consumer_reference, str, ],
        auth_code: typing.Union[MetaOapg.properties.auth_code, str, schemas.Unset] = schemas.unset,
        alias_label: typing.Union[MetaOapg.properties.alias_label, str, schemas.Unset] = schemas.unset,
        alias_key: typing.Union[MetaOapg.properties.alias_key, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BlikOneClick':
        return super().__new__(
            cls,
            *args,
            consumer_reference=consumer_reference,
            auth_code=auth_code,
            alias_label=alias_label,
            alias_key=alias_key,
            _configuration=_configuration,
            **kwargs,
        )
