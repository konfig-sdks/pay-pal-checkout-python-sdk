# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class Card(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment card to use to fund a payment. Can be a credit or debit card.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def id() -> typing.Type['InstrumentId']:
                return InstrumentId
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
                    min_length = 1
                    regex=[{
                        'pattern': r'^.{1,300}$',
                    }]
            
            
            class number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 19
                    min_length = 13
                    regex=[{
                        'pattern': r'^[0-9]{13,19}$',
                    }]
        
            @staticmethod
            def expiry() -> typing.Type['DateYearMonth']:
                return DateYearMonth
            
            
            class security_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
                    min_length = 3
                    regex=[{
                        'pattern': r'^[0-9]{3,4}$',
                    }]
            
            
            class last_digits(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
                    min_length = 2
                    regex=[{
                        'pattern': r'^[0-9]{2,4}$',
                    }]
        
            @staticmethod
            def card_type() -> typing.Type['CardBrand']:
                return CardBrand
        
            @staticmethod
            def type() -> typing.Type['CardType']:
                return CardType
        
            @staticmethod
            def brand() -> typing.Type['CardBrand']:
                return CardBrand
        
            @staticmethod
            def billing_address() -> typing.Type['AddressPortable']:
                return AddressPortable
        
            @staticmethod
            def attributes() -> typing.Type['CardAttributes']:
                return CardAttributes
            __annotations__ = {
                "id": id,
                "name": name,
                "number": number,
                "expiry": expiry,
                "security_code": security_code,
                "last_digits": last_digits,
                "card_type": card_type,
                "type": type,
                "brand": brand,
                "billing_address": billing_address,
                "attributes": attributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'InstrumentId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> 'DateYearMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["security_code"]) -> MetaOapg.properties.security_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_digits"]) -> MetaOapg.properties.last_digits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_type"]) -> 'CardBrand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'CardType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> 'CardBrand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_address"]) -> 'AddressPortable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'CardAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "number", "expiry", "security_code", "last_digits", "card_type", "type", "brand", "billing_address", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['InstrumentId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> typing.Union['DateYearMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["security_code"]) -> typing.Union[MetaOapg.properties.security_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_digits"]) -> typing.Union[MetaOapg.properties.last_digits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_type"]) -> typing.Union['CardBrand', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['CardType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union['CardBrand', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_address"]) -> typing.Union['AddressPortable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['CardAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "number", "expiry", "security_code", "last_digits", "card_type", "type", "brand", "billing_address", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union['InstrumentId', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
        expiry: typing.Union['DateYearMonth', schemas.Unset] = schemas.unset,
        security_code: typing.Union[MetaOapg.properties.security_code, str, schemas.Unset] = schemas.unset,
        last_digits: typing.Union[MetaOapg.properties.last_digits, str, schemas.Unset] = schemas.unset,
        card_type: typing.Union['CardBrand', schemas.Unset] = schemas.unset,
        type: typing.Union['CardType', schemas.Unset] = schemas.unset,
        brand: typing.Union['CardBrand', schemas.Unset] = schemas.unset,
        billing_address: typing.Union['AddressPortable', schemas.Unset] = schemas.unset,
        attributes: typing.Union['CardAttributes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Card':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            number=number,
            expiry=expiry,
            security_code=security_code,
            last_digits=last_digits,
            card_type=card_type,
            type=type,
            brand=brand,
            billing_address=billing_address,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.address_portable import AddressPortable
from pay_pal_checkout_python_sdk.model.card_attributes import CardAttributes
from pay_pal_checkout_python_sdk.model.card_brand import CardBrand
from pay_pal_checkout_python_sdk.model.card_type import CardType
from pay_pal_checkout_python_sdk.model.date_year_month import DateYearMonth
from pay_pal_checkout_python_sdk.model.instrument_id import InstrumentId
