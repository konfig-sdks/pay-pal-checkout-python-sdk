# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class CardRequest(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment card to use to fund a payment. Can be a credit or debit card.<blockquote><strong>Note:</strong> Passing card number, cvv and expiry directly via the API requires <a href="https://www.pcisecuritystandards.org/pci_security/completing_self_assessment"> PCI SAQ D compliance</a>. <br>*PayPal offers a mechanism by which you do not have to take on the <strong>PCI SAQ D</strong> burden by using hosted fields - refer to <a href="https://developer.paypal.com/docs/checkout/advanced/integrate/">this Integration Guide</a>*.</blockquote>
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def vault_id() -> typing.Type['VaultId']:
                        return VaultId
                
                    @staticmethod
                    def stored_credential() -> typing.Type['CardStoredCredential']:
                        return CardStoredCredential
                
                    @staticmethod
                    def network_token() -> typing.Type['NetworkTokenRequest']:
                        return NetworkTokenRequest
                
                    @staticmethod
                    def experience_context() -> typing.Type['CardExperienceContext']:
                        return CardExperienceContext
                    __annotations__ = {
                        "vault_id": vault_id,
                        "stored_credential": stored_credential,
                        "network_token": network_token,
                        "experience_context": experience_context,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vault_id"]) -> 'VaultId': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stored_credential"]) -> 'CardStoredCredential': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["network_token"]) -> 'NetworkTokenRequest': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["experience_context"]) -> 'CardExperienceContext': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["vault_id", "stored_credential", "network_token", "experience_context", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vault_id"]) -> typing.Union['VaultId', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stored_credential"]) -> typing.Union['CardStoredCredential', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["network_token"]) -> typing.Union['NetworkTokenRequest', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["experience_context"]) -> typing.Union['CardExperienceContext', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vault_id", "stored_credential", "network_token", "experience_context", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                vault_id: typing.Union['VaultId', schemas.Unset] = schemas.unset,
                stored_credential: typing.Union['CardStoredCredential', schemas.Unset] = schemas.unset,
                network_token: typing.Union['NetworkTokenRequest', schemas.Unset] = schemas.unset,
                experience_context: typing.Union['CardExperienceContext', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    vault_id=vault_id,
                    stored_credential=stored_credential,
                    network_token=network_token,
                    experience_context=experience_context,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Card,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardRequest':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.card import Card
from pay_pal_checkout_python_sdk.model.card_experience_context import CardExperienceContext
from pay_pal_checkout_python_sdk.model.card_stored_credential import CardStoredCredential
from pay_pal_checkout_python_sdk.model.network_token_request import NetworkTokenRequest
from pay_pal_checkout_python_sdk.model.vault_id import VaultId
