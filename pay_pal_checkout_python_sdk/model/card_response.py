# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class CardResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment card to use to fund a payment. Card can be a credit or debit card.
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
                    min_length = 2
            
            
            class last_digits(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'[0-9]{2,}',
                    }]
        
            @staticmethod
            def brand() -> typing.Type['CardBrand']:
                return CardBrand
            
            
            class available_networks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 256
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['CardBrand']:
                        return CardBrand
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CardBrand'], typing.List['CardBrand']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'available_networks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CardBrand':
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CREDIT": "CREDIT",
                        "DEBIT": "DEBIT",
                        "PREPAID": "PREPAID",
                        "UNKNOWN": "UNKNOWN",
                    }
                
                @schemas.classproperty
                def CREDIT(cls):
                    return cls("CREDIT")
                
                @schemas.classproperty
                def DEBIT(cls):
                    return cls("DEBIT")
                
                @schemas.classproperty
                def PREPAID(cls):
                    return cls("PREPAID")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
        
            @staticmethod
            def authentication_result() -> typing.Type['AuthenticationResponse']:
                return AuthenticationResponse
        
            @staticmethod
            def attributes() -> typing.Type['CardAttributesResponse']:
                return CardAttributesResponse
        
            @staticmethod
            def from_request() -> typing.Type['CardFromRequest']:
                return CardFromRequest
        
            @staticmethod
            def expiry() -> typing.Type['DateYearMonth']:
                return DateYearMonth
        
            @staticmethod
            def bin_details() -> typing.Type['BinDetails']:
                return BinDetails
            __annotations__ = {
                "name": name,
                "last_digits": last_digits,
                "brand": brand,
                "available_networks": available_networks,
                "type": type,
                "authentication_result": authentication_result,
                "attributes": attributes,
                "from_request": from_request,
                "expiry": expiry,
                "bin_details": bin_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_digits"]) -> MetaOapg.properties.last_digits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> 'CardBrand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_networks"]) -> MetaOapg.properties.available_networks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_result"]) -> 'AuthenticationResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'CardAttributesResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_request"]) -> 'CardFromRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> 'DateYearMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin_details"]) -> 'BinDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "last_digits", "brand", "available_networks", "type", "authentication_result", "attributes", "from_request", "expiry", "bin_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_digits"]) -> typing.Union[MetaOapg.properties.last_digits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union['CardBrand', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_networks"]) -> typing.Union[MetaOapg.properties.available_networks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_result"]) -> typing.Union['AuthenticationResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['CardAttributesResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_request"]) -> typing.Union['CardFromRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> typing.Union['DateYearMonth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin_details"]) -> typing.Union['BinDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "last_digits", "brand", "available_networks", "type", "authentication_result", "attributes", "from_request", "expiry", "bin_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        last_digits: typing.Union[MetaOapg.properties.last_digits, str, schemas.Unset] = schemas.unset,
        brand: typing.Union['CardBrand', schemas.Unset] = schemas.unset,
        available_networks: typing.Union[MetaOapg.properties.available_networks, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        authentication_result: typing.Union['AuthenticationResponse', schemas.Unset] = schemas.unset,
        attributes: typing.Union['CardAttributesResponse', schemas.Unset] = schemas.unset,
        from_request: typing.Union['CardFromRequest', schemas.Unset] = schemas.unset,
        expiry: typing.Union['DateYearMonth', schemas.Unset] = schemas.unset,
        bin_details: typing.Union['BinDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardResponse':
        return super().__new__(
            cls,
            *args,
            name=name,
            last_digits=last_digits,
            brand=brand,
            available_networks=available_networks,
            type=type,
            authentication_result=authentication_result,
            attributes=attributes,
            from_request=from_request,
            expiry=expiry,
            bin_details=bin_details,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.authentication_response import AuthenticationResponse
from pay_pal_checkout_python_sdk.model.bin_details import BinDetails
from pay_pal_checkout_python_sdk.model.card_attributes_response import CardAttributesResponse
from pay_pal_checkout_python_sdk.model.card_brand import CardBrand
from pay_pal_checkout_python_sdk.model.card_from_request import CardFromRequest
from pay_pal_checkout_python_sdk.model.date_year_month import DateYearMonth
