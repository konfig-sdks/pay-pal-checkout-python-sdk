# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class CardSupplementaryData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href="https://developer.paypal.com/docs/checkout/advanced/processing/">checkout</a> or <a href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/">multiparty checkout</a>.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def level_2() -> typing.Type['Level2CardProcessingData']:
                return Level2CardProcessingData
        
            @staticmethod
            def level_3() -> typing.Type['Level3CardProcessingData']:
                return Level3CardProcessingData
            __annotations__ = {
                "level_2": level_2,
                "level_3": level_3,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level_2"]) -> 'Level2CardProcessingData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level_3"]) -> 'Level3CardProcessingData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["level_2", "level_3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level_2"]) -> typing.Union['Level2CardProcessingData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level_3"]) -> typing.Union['Level3CardProcessingData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["level_2", "level_3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        level_2: typing.Union['Level2CardProcessingData', schemas.Unset] = schemas.unset,
        level_3: typing.Union['Level3CardProcessingData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardSupplementaryData':
        return super().__new__(
            cls,
            *args,
            level_2=level_2,
            level_3=level_3,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.level2_card_processing_data import Level2CardProcessingData
from pay_pal_checkout_python_sdk.model.level3_card_processing_data import Level3CardProcessingData
