# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class ConfirmOrderRequest(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Payer confirms the intent to pay for the Order using the provided payment source.
    """


    class MetaOapg:
        required = {
            "payment_source",
        }
        
        class properties:
        
            @staticmethod
            def payment_source() -> typing.Type['PaymentSource']:
                return PaymentSource
        
            @staticmethod
            def processing_instruction() -> typing.Type['ProcessingInstruction']:
                return ProcessingInstruction
        
            @staticmethod
            def application_context() -> typing.Type['OrderConfirmApplicationContext']:
                return OrderConfirmApplicationContext
            __annotations__ = {
                "payment_source": payment_source,
                "processing_instruction": processing_instruction,
                "application_context": application_context,
            }

    
    payment_source: 'PaymentSource'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_source"]) -> 'PaymentSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processing_instruction"]) -> 'ProcessingInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_context"]) -> 'OrderConfirmApplicationContext': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payment_source", "processing_instruction", "application_context", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_source"]) -> 'PaymentSource': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processing_instruction"]) -> typing.Union['ProcessingInstruction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_context"]) -> typing.Union['OrderConfirmApplicationContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payment_source", "processing_instruction", "application_context", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        payment_source: 'PaymentSource',
        processing_instruction: typing.Union['ProcessingInstruction', schemas.Unset] = schemas.unset,
        application_context: typing.Union['OrderConfirmApplicationContext', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConfirmOrderRequest':
        return super().__new__(
            cls,
            *args,
            payment_source=payment_source,
            processing_instruction=processing_instruction,
            application_context=application_context,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.order_confirm_application_context import OrderConfirmApplicationContext
from pay_pal_checkout_python_sdk.model.payment_source import PaymentSource
from pay_pal_checkout_python_sdk.model.processing_instruction import ProcessingInstruction
