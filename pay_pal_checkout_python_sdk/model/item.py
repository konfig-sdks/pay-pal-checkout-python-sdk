# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The details for the items to be purchased.
    """


    class MetaOapg:
        required = {
            "quantity",
            "name",
            "unit_amount",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 127
                    min_length = 1
        
            @staticmethod
            def unit_amount() -> typing.Type['Money']:
                return Money
            
            
            class quantity(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 10
                    regex=[{
                        'pattern': r'^[1-9][0-9]{0,9}$',
                    }]
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 127
        
            @staticmethod
            def tax() -> typing.Type['Money']:
                return Money
            
            
            class sku(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 127
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 20
                    min_length = 1
                    enum_value_to_name = {
                        "DIGITAL_GOODS": "DIGITAL_GOODS",
                        "PHYSICAL_GOODS": "PHYSICAL_GOODS",
                        "DONATION": "DONATION",
                    }
                
                @schemas.classproperty
                def DIGITAL_GOODS(cls):
                    return cls("DIGITAL_GOODS")
                
                @schemas.classproperty
                def PHYSICAL_GOODS(cls):
                    return cls("PHYSICAL_GOODS")
                
                @schemas.classproperty
                def DONATION(cls):
                    return cls("DONATION")
            __annotations__ = {
                "name": name,
                "unit_amount": unit_amount,
                "quantity": quantity,
                "description": description,
                "tax": tax,
                "sku": sku,
                "category": category,
            }
    
    quantity: MetaOapg.properties.quantity
    name: MetaOapg.properties.name
    unit_amount: 'Money'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "unit_amount", "quantity", "description", "tax", "sku", "category", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_amount"]) -> 'Money': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "unit_amount", "quantity", "description", "tax", "sku", "category", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        quantity: typing.Union[MetaOapg.properties.quantity, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        unit_amount: 'Money',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        tax: typing.Union['Money', schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Item':
        return super().__new__(
            cls,
            *args,
            quantity=quantity,
            name=name,
            unit_amount=unit_amount,
            description=description,
            tax=tax,
            sku=sku,
            category=category,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.money import Money
