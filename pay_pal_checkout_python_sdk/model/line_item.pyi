# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class LineItem(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The line items for this purchase. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class commodity_code(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def discount_amount() -> typing.Type['Money']:
                        return Money
                
                    @staticmethod
                    def total_amount() -> typing.Type['Money']:
                        return Money
                    
                    
                    class unit_of_measure(
                        schemas.StrSchema
                    ):
                        pass
                    __annotations__ = {
                        "commodity_code": commodity_code,
                        "discount_amount": discount_amount,
                        "total_amount": total_amount,
                        "unit_of_measure": unit_of_measure,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["commodity_code"]) -> MetaOapg.properties.commodity_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["discount_amount"]) -> 'Money': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["total_amount"]) -> 'Money': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["unit_of_measure"]) -> MetaOapg.properties.unit_of_measure: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["commodity_code", "discount_amount", "total_amount", "unit_of_measure", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["commodity_code"]) -> typing.Union[MetaOapg.properties.commodity_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["discount_amount"]) -> typing.Union['Money', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["total_amount"]) -> typing.Union['Money', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["unit_of_measure"]) -> typing.Union[MetaOapg.properties.unit_of_measure, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commodity_code", "discount_amount", "total_amount", "unit_of_measure", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                commodity_code: typing.Union[MetaOapg.properties.commodity_code, str, schemas.Unset] = schemas.unset,
                discount_amount: typing.Union['Money', schemas.Unset] = schemas.unset,
                total_amount: typing.Union['Money', schemas.Unset] = schemas.unset,
                unit_of_measure: typing.Union[MetaOapg.properties.unit_of_measure, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    commodity_code=commodity_code,
                    discount_amount=discount_amount,
                    total_amount=total_amount,
                    unit_of_measure=unit_of_measure,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Item,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LineItem':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.item import Item
from pay_pal_checkout_python_sdk.model.money import Money
