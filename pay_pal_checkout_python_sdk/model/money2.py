# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class Money2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The currency and amount for a financial transaction, such as a balance or payment due.
    """


    class MetaOapg:
        required = {
            "value",
            "currency_code",
        }
        
        class properties:
        
            @staticmethod
            def currency_code() -> typing.Type['CurrencyCode2']:
                return CurrencyCode2
            
            
            class value(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 32
                    regex=[{
                        'pattern': r'^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$',
                    }]
            __annotations__ = {
                "currency_code": currency_code,
                "value": value,
            }
    
    value: MetaOapg.properties.value
    currency_code: 'CurrencyCode2'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCode2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_code", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCode2': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_code", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        currency_code: 'CurrencyCode2',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Money2':
        return super().__new__(
            cls,
            *args,
            value=value,
            currency_code=currency_code,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.currency_code2 import CurrencyCode2
