# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class NetworkTokenRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The Third Party Network token used to fund a payment.
    """


    class MetaOapg:
        required = {
            "number",
            "expiry",
        }
        
        class properties:
            
            
            class number(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def expiry() -> typing.Type['DateYearMonth']:
                return DateYearMonth
            
            
            class cryptogram(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def eci_flag() -> typing.Type['EciFlag']:
                return EciFlag
            
            
            class token_requestor_id(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "number": number,
                "expiry": expiry,
                "cryptogram": cryptogram,
                "eci_flag": eci_flag,
                "token_requestor_id": token_requestor_id,
            }
    
    number: MetaOapg.properties.number
    expiry: 'DateYearMonth'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> 'DateYearMonth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cryptogram"]) -> MetaOapg.properties.cryptogram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eci_flag"]) -> 'EciFlag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_requestor_id"]) -> MetaOapg.properties.token_requestor_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["number", "expiry", "cryptogram", "eci_flag", "token_requestor_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> 'DateYearMonth': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cryptogram"]) -> typing.Union[MetaOapg.properties.cryptogram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eci_flag"]) -> typing.Union['EciFlag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_requestor_id"]) -> typing.Union[MetaOapg.properties.token_requestor_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["number", "expiry", "cryptogram", "eci_flag", "token_requestor_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, str, ],
        expiry: 'DateYearMonth',
        cryptogram: typing.Union[MetaOapg.properties.cryptogram, str, schemas.Unset] = schemas.unset,
        eci_flag: typing.Union['EciFlag', schemas.Unset] = schemas.unset,
        token_requestor_id: typing.Union[MetaOapg.properties.token_requestor_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkTokenRequest':
        return super().__new__(
            cls,
            *args,
            number=number,
            expiry=expiry,
            cryptogram=cryptogram,
            eci_flag=eci_flag,
            token_requestor_id=token_requestor_id,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.date_year_month import DateYearMonth
from pay_pal_checkout_python_sdk.model.eci_flag import EciFlag
