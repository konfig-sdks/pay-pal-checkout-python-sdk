# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class Order(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The order details.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    id = schemas.StrSchema
                
                    @staticmethod
                    def payment_source() -> typing.Type['PaymentSourceResponse']:
                        return PaymentSourceResponse
                
                    @staticmethod
                    def intent() -> typing.Type['CheckoutPaymentIntent']:
                        return CheckoutPaymentIntent
                
                    @staticmethod
                    def processing_instruction() -> typing.Type['ProcessingInstruction']:
                        return ProcessingInstruction
                
                    @staticmethod
                    def payer() -> typing.Type['Payer']:
                        return Payer
                    
                    
                    class purchase_units(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_items = 10
                            min_items = 1
                            
                            @staticmethod
                            def items() -> typing.Type['PurchaseUnit']:
                                return PurchaseUnit
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['PurchaseUnit'], typing.List['PurchaseUnit']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'purchase_units':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'PurchaseUnit':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def status() -> typing.Type['OrderStatus']:
                        return OrderStatus
                    
                    
                    class links(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['LinkDescription']:
                                return LinkDescription
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['LinkDescription'], typing.List['LinkDescription']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'links':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'LinkDescription':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "id": id,
                        "payment_source": payment_source,
                        "intent": intent,
                        "processing_instruction": processing_instruction,
                        "payer": payer,
                        "purchase_units": purchase_units,
                        "status": status,
                        "links": links,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payment_source"]) -> 'PaymentSourceResponse': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["intent"]) -> 'CheckoutPaymentIntent': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["processing_instruction"]) -> 'ProcessingInstruction': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payer"]) -> 'Payer': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["purchase_units"]) -> MetaOapg.properties.purchase_units: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'OrderStatus': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "payment_source", "intent", "processing_instruction", "payer", "purchase_units", "status", "links", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payment_source"]) -> typing.Union['PaymentSourceResponse', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["intent"]) -> typing.Union['CheckoutPaymentIntent', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["processing_instruction"]) -> typing.Union['ProcessingInstruction', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payer"]) -> typing.Union['Payer', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["purchase_units"]) -> typing.Union[MetaOapg.properties.purchase_units, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['OrderStatus', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "payment_source", "intent", "processing_instruction", "payer", "purchase_units", "status", "links", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                payment_source: typing.Union['PaymentSourceResponse', schemas.Unset] = schemas.unset,
                intent: typing.Union['CheckoutPaymentIntent', schemas.Unset] = schemas.unset,
                processing_instruction: typing.Union['ProcessingInstruction', schemas.Unset] = schemas.unset,
                payer: typing.Union['Payer', schemas.Unset] = schemas.unset,
                purchase_units: typing.Union[MetaOapg.properties.purchase_units, list, tuple, schemas.Unset] = schemas.unset,
                status: typing.Union['OrderStatus', schemas.Unset] = schemas.unset,
                links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    id=id,
                    payment_source=payment_source,
                    intent=intent,
                    processing_instruction=processing_instruction,
                    payer=payer,
                    purchase_units=purchase_units,
                    status=status,
                    links=links,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ActivityTimestamps,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Order':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.activity_timestamps import ActivityTimestamps
from pay_pal_checkout_python_sdk.model.checkout_payment_intent import CheckoutPaymentIntent
from pay_pal_checkout_python_sdk.model.link_description import LinkDescription
from pay_pal_checkout_python_sdk.model.order_status import OrderStatus
from pay_pal_checkout_python_sdk.model.payer import Payer
from pay_pal_checkout_python_sdk.model.payment_source_response import PaymentSourceResponse
from pay_pal_checkout_python_sdk.model.processing_instruction import ProcessingInstruction
from pay_pal_checkout_python_sdk.model.purchase_unit import PurchaseUnit
