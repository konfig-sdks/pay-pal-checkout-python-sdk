# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class OrderConfirmApplicationContext(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Customizes the payer confirmation experience.
    """


    class MetaOapg:
        
        class properties:
            
            
            class brand_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 127
                    min_length = 1
        
            @staticmethod
            def locale() -> typing.Type['Language']:
                return Language
            
            
            class return_url(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 4000
                    min_length = 10
            
            
            class cancel_url(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 4000
                    min_length = 10
        
            @staticmethod
            def stored_payment_source() -> typing.Type['StoredPaymentSource']:
                return StoredPaymentSource
            __annotations__ = {
                "brand_name": brand_name,
                "locale": locale,
                "return_url": return_url,
                "cancel_url": cancel_url,
                "stored_payment_source": stored_payment_source,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_name"]) -> MetaOapg.properties.brand_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> 'Language': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["return_url"]) -> MetaOapg.properties.return_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancel_url"]) -> MetaOapg.properties.cancel_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stored_payment_source"]) -> 'StoredPaymentSource': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["brand_name", "locale", "return_url", "cancel_url", "stored_payment_source", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_name"]) -> typing.Union[MetaOapg.properties.brand_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union['Language', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["return_url"]) -> typing.Union[MetaOapg.properties.return_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancel_url"]) -> typing.Union[MetaOapg.properties.cancel_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stored_payment_source"]) -> typing.Union['StoredPaymentSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["brand_name", "locale", "return_url", "cancel_url", "stored_payment_source", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        brand_name: typing.Union[MetaOapg.properties.brand_name, str, schemas.Unset] = schemas.unset,
        locale: typing.Union['Language', schemas.Unset] = schemas.unset,
        return_url: typing.Union[MetaOapg.properties.return_url, str, schemas.Unset] = schemas.unset,
        cancel_url: typing.Union[MetaOapg.properties.cancel_url, str, schemas.Unset] = schemas.unset,
        stored_payment_source: typing.Union['StoredPaymentSource', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderConfirmApplicationContext':
        return super().__new__(
            cls,
            *args,
            brand_name=brand_name,
            locale=locale,
            return_url=return_url,
            cancel_url=cancel_url,
            stored_payment_source=stored_payment_source,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.language import Language
from pay_pal_checkout_python_sdk.model.stored_payment_source import StoredPaymentSource
