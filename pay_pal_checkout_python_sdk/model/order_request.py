# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class OrderRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The order request details.
    """


    class MetaOapg:
        required = {
            "purchase_units",
            "intent",
        }
        
        class properties:
        
            @staticmethod
            def intent() -> typing.Type['CheckoutPaymentIntent']:
                return CheckoutPaymentIntent
            
            
            class purchase_units(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 10
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['PurchaseUnitRequest']:
                        return PurchaseUnitRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PurchaseUnitRequest'], typing.List['PurchaseUnitRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchase_units':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PurchaseUnitRequest':
                    return super().__getitem__(i)
        
            @staticmethod
            def payer() -> typing.Type['Payer']:
                return Payer
        
            @staticmethod
            def payment_source() -> typing.Type['PaymentSource']:
                return PaymentSource
        
            @staticmethod
            def application_context() -> typing.Type['OrderApplicationContext']:
                return OrderApplicationContext
            __annotations__ = {
                "intent": intent,
                "purchase_units": purchase_units,
                "payer": payer,
                "payment_source": payment_source,
                "application_context": application_context,
            }
    
    purchase_units: MetaOapg.properties.purchase_units
    intent: 'CheckoutPaymentIntent'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intent"]) -> 'CheckoutPaymentIntent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_units"]) -> MetaOapg.properties.purchase_units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payer"]) -> 'Payer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_source"]) -> 'PaymentSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_context"]) -> 'OrderApplicationContext': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["intent", "purchase_units", "payer", "payment_source", "application_context", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intent"]) -> 'CheckoutPaymentIntent': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_units"]) -> MetaOapg.properties.purchase_units: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payer"]) -> typing.Union['Payer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_source"]) -> typing.Union['PaymentSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_context"]) -> typing.Union['OrderApplicationContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["intent", "purchase_units", "payer", "payment_source", "application_context", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        purchase_units: typing.Union[MetaOapg.properties.purchase_units, list, tuple, ],
        intent: 'CheckoutPaymentIntent',
        payer: typing.Union['Payer', schemas.Unset] = schemas.unset,
        payment_source: typing.Union['PaymentSource', schemas.Unset] = schemas.unset,
        application_context: typing.Union['OrderApplicationContext', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderRequest':
        return super().__new__(
            cls,
            *args,
            purchase_units=purchase_units,
            intent=intent,
            payer=payer,
            payment_source=payment_source,
            application_context=application_context,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.checkout_payment_intent import CheckoutPaymentIntent
from pay_pal_checkout_python_sdk.model.order_application_context import OrderApplicationContext
from pay_pal_checkout_python_sdk.model.payer import Payer
from pay_pal_checkout_python_sdk.model.payment_source import PaymentSource
from pay_pal_checkout_python_sdk.model.purchase_unit_request import PurchaseUnitRequest
