# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class P24(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information used to pay using P24(Przelewy24).
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def name() -> typing.Type['FullName']:
                return FullName
        
            @staticmethod
            def email() -> typing.Type['EmailAddress']:
                return EmailAddress
        
            @staticmethod
            def country_code() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class payment_descriptor(
                schemas.StrSchema
            ):
                pass
            
            
            class method_id(
                schemas.StrSchema
            ):
                pass
            
            
            class method_description(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "name": name,
                "email": email,
                "country_code": country_code,
                "payment_descriptor": payment_descriptor,
                "method_id": method_id,
                "method_description": method_description,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'FullName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> 'EmailAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_descriptor"]) -> MetaOapg.properties.payment_descriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method_id"]) -> MetaOapg.properties.method_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method_description"]) -> MetaOapg.properties.method_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "email", "country_code", "payment_descriptor", "method_id", "method_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['FullName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union['EmailAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union['CountryCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_descriptor"]) -> typing.Union[MetaOapg.properties.payment_descriptor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method_id"]) -> typing.Union[MetaOapg.properties.method_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method_description"]) -> typing.Union[MetaOapg.properties.method_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "email", "country_code", "payment_descriptor", "method_id", "method_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union['FullName', schemas.Unset] = schemas.unset,
        email: typing.Union['EmailAddress', schemas.Unset] = schemas.unset,
        country_code: typing.Union['CountryCode', schemas.Unset] = schemas.unset,
        payment_descriptor: typing.Union[MetaOapg.properties.payment_descriptor, str, schemas.Unset] = schemas.unset,
        method_id: typing.Union[MetaOapg.properties.method_id, str, schemas.Unset] = schemas.unset,
        method_description: typing.Union[MetaOapg.properties.method_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'P24':
        return super().__new__(
            cls,
            *args,
            name=name,
            email=email,
            country_code=country_code,
            payment_descriptor=payment_descriptor,
            method_id=method_id,
            method_description=method_description,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.country_code import CountryCode
from pay_pal_checkout_python_sdk.model.email_address import EmailAddress
from pay_pal_checkout_python_sdk.model.full_name import FullName
