# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class PaymentSource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment source definition.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def card() -> typing.Type['CardRequest']:
                return CardRequest
        
            @staticmethod
            def token() -> typing.Type['Token']:
                return Token
        
            @staticmethod
            def paypal() -> typing.Type['PaypalWallet']:
                return PaypalWallet
        
            @staticmethod
            def bancontact() -> typing.Type['BancontactRequest']:
                return BancontactRequest
        
            @staticmethod
            def blik() -> typing.Type['BlikRequest']:
                return BlikRequest
        
            @staticmethod
            def eps() -> typing.Type['EpsRequest']:
                return EpsRequest
        
            @staticmethod
            def giropay() -> typing.Type['GiropayRequest']:
                return GiropayRequest
        
            @staticmethod
            def ideal() -> typing.Type['IdealRequest']:
                return IdealRequest
        
            @staticmethod
            def mybank() -> typing.Type['MybankRequest']:
                return MybankRequest
        
            @staticmethod
            def p24() -> typing.Type['P24Request']:
                return P24Request
        
            @staticmethod
            def sofort() -> typing.Type['SofortRequest']:
                return SofortRequest
        
            @staticmethod
            def trustly() -> typing.Type['TrustlyRequest']:
                return TrustlyRequest
        
            @staticmethod
            def apple_pay() -> typing.Type['ApplePayRequest']:
                return ApplePayRequest
            google_pay = schemas.AnyTypeSchema
        
            @staticmethod
            def venmo() -> typing.Type['VenmoWalletRequest']:
                return VenmoWalletRequest
            __annotations__ = {
                "card": card,
                "token": token,
                "paypal": paypal,
                "bancontact": bancontact,
                "blik": blik,
                "eps": eps,
                "giropay": giropay,
                "ideal": ideal,
                "mybank": mybank,
                "p24": p24,
                "sofort": sofort,
                "trustly": trustly,
                "apple_pay": apple_pay,
                "google_pay": google_pay,
                "venmo": venmo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> 'CardRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> 'Token': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paypal"]) -> 'PaypalWallet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bancontact"]) -> 'BancontactRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blik"]) -> 'BlikRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eps"]) -> 'EpsRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["giropay"]) -> 'GiropayRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ideal"]) -> 'IdealRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mybank"]) -> 'MybankRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["p24"]) -> 'P24Request': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sofort"]) -> 'SofortRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustly"]) -> 'TrustlyRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apple_pay"]) -> 'ApplePayRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["google_pay"]) -> MetaOapg.properties.google_pay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["venmo"]) -> 'VenmoWalletRequest': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["card", "token", "paypal", "bancontact", "blik", "eps", "giropay", "ideal", "mybank", "p24", "sofort", "trustly", "apple_pay", "google_pay", "venmo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union['CardRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union['Token', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paypal"]) -> typing.Union['PaypalWallet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bancontact"]) -> typing.Union['BancontactRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blik"]) -> typing.Union['BlikRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eps"]) -> typing.Union['EpsRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["giropay"]) -> typing.Union['GiropayRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ideal"]) -> typing.Union['IdealRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mybank"]) -> typing.Union['MybankRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["p24"]) -> typing.Union['P24Request', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sofort"]) -> typing.Union['SofortRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustly"]) -> typing.Union['TrustlyRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apple_pay"]) -> typing.Union['ApplePayRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["google_pay"]) -> typing.Union[MetaOapg.properties.google_pay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["venmo"]) -> typing.Union['VenmoWalletRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["card", "token", "paypal", "bancontact", "blik", "eps", "giropay", "ideal", "mybank", "p24", "sofort", "trustly", "apple_pay", "google_pay", "venmo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        card: typing.Union['CardRequest', schemas.Unset] = schemas.unset,
        token: typing.Union['Token', schemas.Unset] = schemas.unset,
        paypal: typing.Union['PaypalWallet', schemas.Unset] = schemas.unset,
        bancontact: typing.Union['BancontactRequest', schemas.Unset] = schemas.unset,
        blik: typing.Union['BlikRequest', schemas.Unset] = schemas.unset,
        eps: typing.Union['EpsRequest', schemas.Unset] = schemas.unset,
        giropay: typing.Union['GiropayRequest', schemas.Unset] = schemas.unset,
        ideal: typing.Union['IdealRequest', schemas.Unset] = schemas.unset,
        mybank: typing.Union['MybankRequest', schemas.Unset] = schemas.unset,
        p24: typing.Union['P24Request', schemas.Unset] = schemas.unset,
        sofort: typing.Union['SofortRequest', schemas.Unset] = schemas.unset,
        trustly: typing.Union['TrustlyRequest', schemas.Unset] = schemas.unset,
        apple_pay: typing.Union['ApplePayRequest', schemas.Unset] = schemas.unset,
        google_pay: typing.Union[MetaOapg.properties.google_pay, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        venmo: typing.Union['VenmoWalletRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentSource':
        return super().__new__(
            cls,
            *args,
            card=card,
            token=token,
            paypal=paypal,
            bancontact=bancontact,
            blik=blik,
            eps=eps,
            giropay=giropay,
            ideal=ideal,
            mybank=mybank,
            p24=p24,
            sofort=sofort,
            trustly=trustly,
            apple_pay=apple_pay,
            google_pay=google_pay,
            venmo=venmo,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.apple_pay_request import ApplePayRequest
from pay_pal_checkout_python_sdk.model.bancontact_request import BancontactRequest
from pay_pal_checkout_python_sdk.model.blik_request import BlikRequest
from pay_pal_checkout_python_sdk.model.card_request import CardRequest
from pay_pal_checkout_python_sdk.model.eps_request import EpsRequest
from pay_pal_checkout_python_sdk.model.giropay_request import GiropayRequest
from pay_pal_checkout_python_sdk.model.ideal_request import IdealRequest
from pay_pal_checkout_python_sdk.model.mybank_request import MybankRequest
from pay_pal_checkout_python_sdk.model.p24_request import P24Request
from pay_pal_checkout_python_sdk.model.paypal_wallet import PaypalWallet
from pay_pal_checkout_python_sdk.model.sofort_request import SofortRequest
from pay_pal_checkout_python_sdk.model.token import Token
from pay_pal_checkout_python_sdk.model.trustly_request import TrustlyRequest
from pay_pal_checkout_python_sdk.model.venmo_wallet_request import VenmoWalletRequest
