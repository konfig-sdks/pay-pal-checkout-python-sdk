# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class PaymentSourceResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment source used to fund the payment.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def card() -> typing.Type['CardResponse']:
                return CardResponse
        
            @staticmethod
            def paypal() -> typing.Type['PaypalWalletResponse']:
                return PaypalWalletResponse
        
            @staticmethod
            def bancontact() -> typing.Type['Bancontact']:
                return Bancontact
        
            @staticmethod
            def blik() -> typing.Type['Blik']:
                return Blik
        
            @staticmethod
            def eps() -> typing.Type['Eps']:
                return Eps
        
            @staticmethod
            def giropay() -> typing.Type['Giropay']:
                return Giropay
        
            @staticmethod
            def ideal() -> typing.Type['Ideal']:
                return Ideal
        
            @staticmethod
            def mybank() -> typing.Type['Mybank']:
                return Mybank
        
            @staticmethod
            def p24() -> typing.Type['P24']:
                return P24
        
            @staticmethod
            def sofort() -> typing.Type['Sofort']:
                return Sofort
        
            @staticmethod
            def trustly() -> typing.Type['Trustly']:
                return Trustly
        
            @staticmethod
            def venmo() -> typing.Type['VenmoWalletResponse']:
                return VenmoWalletResponse
            __annotations__ = {
                "card": card,
                "paypal": paypal,
                "bancontact": bancontact,
                "blik": blik,
                "eps": eps,
                "giropay": giropay,
                "ideal": ideal,
                "mybank": mybank,
                "p24": p24,
                "sofort": sofort,
                "trustly": trustly,
                "venmo": venmo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> 'CardResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paypal"]) -> 'PaypalWalletResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bancontact"]) -> 'Bancontact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blik"]) -> 'Blik': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eps"]) -> 'Eps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["giropay"]) -> 'Giropay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ideal"]) -> 'Ideal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mybank"]) -> 'Mybank': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["p24"]) -> 'P24': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sofort"]) -> 'Sofort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustly"]) -> 'Trustly': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["venmo"]) -> 'VenmoWalletResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["card", "paypal", "bancontact", "blik", "eps", "giropay", "ideal", "mybank", "p24", "sofort", "trustly", "venmo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union['CardResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paypal"]) -> typing.Union['PaypalWalletResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bancontact"]) -> typing.Union['Bancontact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blik"]) -> typing.Union['Blik', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eps"]) -> typing.Union['Eps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["giropay"]) -> typing.Union['Giropay', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ideal"]) -> typing.Union['Ideal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mybank"]) -> typing.Union['Mybank', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["p24"]) -> typing.Union['P24', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sofort"]) -> typing.Union['Sofort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustly"]) -> typing.Union['Trustly', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["venmo"]) -> typing.Union['VenmoWalletResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["card", "paypal", "bancontact", "blik", "eps", "giropay", "ideal", "mybank", "p24", "sofort", "trustly", "venmo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        card: typing.Union['CardResponse', schemas.Unset] = schemas.unset,
        paypal: typing.Union['PaypalWalletResponse', schemas.Unset] = schemas.unset,
        bancontact: typing.Union['Bancontact', schemas.Unset] = schemas.unset,
        blik: typing.Union['Blik', schemas.Unset] = schemas.unset,
        eps: typing.Union['Eps', schemas.Unset] = schemas.unset,
        giropay: typing.Union['Giropay', schemas.Unset] = schemas.unset,
        ideal: typing.Union['Ideal', schemas.Unset] = schemas.unset,
        mybank: typing.Union['Mybank', schemas.Unset] = schemas.unset,
        p24: typing.Union['P24', schemas.Unset] = schemas.unset,
        sofort: typing.Union['Sofort', schemas.Unset] = schemas.unset,
        trustly: typing.Union['Trustly', schemas.Unset] = schemas.unset,
        venmo: typing.Union['VenmoWalletResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentSourceResponse':
        return super().__new__(
            cls,
            *args,
            card=card,
            paypal=paypal,
            bancontact=bancontact,
            blik=blik,
            eps=eps,
            giropay=giropay,
            ideal=ideal,
            mybank=mybank,
            p24=p24,
            sofort=sofort,
            trustly=trustly,
            venmo=venmo,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.bancontact import Bancontact
from pay_pal_checkout_python_sdk.model.blik import Blik
from pay_pal_checkout_python_sdk.model.card_response import CardResponse
from pay_pal_checkout_python_sdk.model.eps import Eps
from pay_pal_checkout_python_sdk.model.giropay import Giropay
from pay_pal_checkout_python_sdk.model.ideal import Ideal
from pay_pal_checkout_python_sdk.model.mybank import Mybank
from pay_pal_checkout_python_sdk.model.p24 import P24
from pay_pal_checkout_python_sdk.model.paypal_wallet_response import PaypalWalletResponse
from pay_pal_checkout_python_sdk.model.sofort import Sofort
from pay_pal_checkout_python_sdk.model.trustly import Trustly
from pay_pal_checkout_python_sdk.model.venmo_wallet_response import VenmoWalletResponse
