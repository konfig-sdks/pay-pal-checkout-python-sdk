# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class PaypalWallet(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A resource that identifies a PayPal Wallet is used for payment.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def vault_id() -> typing.Type['VaultId']:
                return VaultId
        
            @staticmethod
            def email_address() -> typing.Type['Email']:
                return Email
        
            @staticmethod
            def name() -> typing.Type['Name2']:
                return Name2
        
            @staticmethod
            def phone() -> typing.Type['PhoneWithType']:
                return PhoneWithType
        
            @staticmethod
            def birth_date() -> typing.Type['DateNoTime']:
                return DateNoTime
        
            @staticmethod
            def tax_info() -> typing.Type['TaxInfo']:
                return TaxInfo
        
            @staticmethod
            def address() -> typing.Type['AddressPortable2']:
                return AddressPortable2
        
            @staticmethod
            def attributes() -> typing.Type['PaypalWalletAttributes']:
                return PaypalWalletAttributes
        
            @staticmethod
            def experience_context() -> typing.Type['PaypalWalletExperienceContext']:
                return PaypalWalletExperienceContext
        
            @staticmethod
            def billing_agreement_id() -> typing.Type['BillingAgreementId']:
                return BillingAgreementId
            __annotations__ = {
                "vault_id": vault_id,
                "email_address": email_address,
                "name": name,
                "phone": phone,
                "birth_date": birth_date,
                "tax_info": tax_info,
                "address": address,
                "attributes": attributes,
                "experience_context": experience_context,
                "billing_agreement_id": billing_agreement_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vault_id"]) -> 'VaultId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_address"]) -> 'Email': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'Name2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> 'PhoneWithType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> 'DateNoTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_info"]) -> 'TaxInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'AddressPortable2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'PaypalWalletAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experience_context"]) -> 'PaypalWalletExperienceContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_agreement_id"]) -> 'BillingAgreementId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vault_id", "email_address", "name", "phone", "birth_date", "tax_info", "address", "attributes", "experience_context", "billing_agreement_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vault_id"]) -> typing.Union['VaultId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_address"]) -> typing.Union['Email', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['Name2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union['PhoneWithType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union['DateNoTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_info"]) -> typing.Union['TaxInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['AddressPortable2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['PaypalWalletAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experience_context"]) -> typing.Union['PaypalWalletExperienceContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_agreement_id"]) -> typing.Union['BillingAgreementId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vault_id", "email_address", "name", "phone", "birth_date", "tax_info", "address", "attributes", "experience_context", "billing_agreement_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        vault_id: typing.Union['VaultId', schemas.Unset] = schemas.unset,
        email_address: typing.Union['Email', schemas.Unset] = schemas.unset,
        name: typing.Union['Name2', schemas.Unset] = schemas.unset,
        phone: typing.Union['PhoneWithType', schemas.Unset] = schemas.unset,
        birth_date: typing.Union['DateNoTime', schemas.Unset] = schemas.unset,
        tax_info: typing.Union['TaxInfo', schemas.Unset] = schemas.unset,
        address: typing.Union['AddressPortable2', schemas.Unset] = schemas.unset,
        attributes: typing.Union['PaypalWalletAttributes', schemas.Unset] = schemas.unset,
        experience_context: typing.Union['PaypalWalletExperienceContext', schemas.Unset] = schemas.unset,
        billing_agreement_id: typing.Union['BillingAgreementId', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaypalWallet':
        return super().__new__(
            cls,
            *args,
            vault_id=vault_id,
            email_address=email_address,
            name=name,
            phone=phone,
            birth_date=birth_date,
            tax_info=tax_info,
            address=address,
            attributes=attributes,
            experience_context=experience_context,
            billing_agreement_id=billing_agreement_id,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.address_portable2 import AddressPortable2
from pay_pal_checkout_python_sdk.model.billing_agreement_id import BillingAgreementId
from pay_pal_checkout_python_sdk.model.date_no_time import DateNoTime
from pay_pal_checkout_python_sdk.model.email import Email
from pay_pal_checkout_python_sdk.model.name2 import Name2
from pay_pal_checkout_python_sdk.model.paypal_wallet_attributes import PaypalWalletAttributes
from pay_pal_checkout_python_sdk.model.paypal_wallet_experience_context import PaypalWalletExperienceContext
from pay_pal_checkout_python_sdk.model.phone_with_type import PhoneWithType
from pay_pal_checkout_python_sdk.model.tax_info import TaxInfo
from pay_pal_checkout_python_sdk.model.vault_id import VaultId
