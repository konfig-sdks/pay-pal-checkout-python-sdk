# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class PaypalWalletResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The PayPal Wallet response.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def email_address() -> typing.Type['Email']:
                return Email
        
            @staticmethod
            def account_id() -> typing.Type['AccountId2']:
                return AccountId2
            
            
            class account_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 1
                    regex=[{
                        'pattern': r'^[A-Z_]+$',
                    }]
                    enum_value_to_name = {
                        "VERIFIED": "VERIFIED",
                        "UNVERIFIED": "UNVERIFIED",
                    }
                
                @schemas.classproperty
                def VERIFIED(cls):
                    return cls("VERIFIED")
                
                @schemas.classproperty
                def UNVERIFIED(cls):
                    return cls("UNVERIFIED")
        
            @staticmethod
            def name() -> typing.Type['Name2']:
                return Name2
        
            @staticmethod
            def phone_type() -> typing.Type['PhoneType2']:
                return PhoneType2
        
            @staticmethod
            def phone_number() -> typing.Type['Phone2']:
                return Phone2
        
            @staticmethod
            def birth_date() -> typing.Type['DateNoTime']:
                return DateNoTime
        
            @staticmethod
            def tax_info() -> typing.Type['TaxInfo']:
                return TaxInfo
        
            @staticmethod
            def address() -> typing.Type['AddressPortable2']:
                return AddressPortable2
        
            @staticmethod
            def attributes() -> typing.Type['PaypalWalletAttributesResponse']:
                return PaypalWalletAttributesResponse
            __annotations__ = {
                "email_address": email_address,
                "account_id": account_id,
                "account_status": account_status,
                "name": name,
                "phone_type": phone_type,
                "phone_number": phone_number,
                "birth_date": birth_date,
                "tax_info": tax_info,
                "address": address,
                "attributes": attributes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_address"]) -> 'Email': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> 'AccountId2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_status"]) -> MetaOapg.properties.account_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'Name2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_type"]) -> 'PhoneType2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> 'Phone2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> 'DateNoTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_info"]) -> 'TaxInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'AddressPortable2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> 'PaypalWalletAttributesResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email_address", "account_id", "account_status", "name", "phone_type", "phone_number", "birth_date", "tax_info", "address", "attributes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_address"]) -> typing.Union['Email', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union['AccountId2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_status"]) -> typing.Union[MetaOapg.properties.account_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union['Name2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_type"]) -> typing.Union['PhoneType2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union['Phone2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union['DateNoTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_info"]) -> typing.Union['TaxInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['AddressPortable2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union['PaypalWalletAttributesResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email_address", "account_id", "account_status", "name", "phone_type", "phone_number", "birth_date", "tax_info", "address", "attributes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        email_address: typing.Union['Email', schemas.Unset] = schemas.unset,
        account_id: typing.Union['AccountId2', schemas.Unset] = schemas.unset,
        account_status: typing.Union[MetaOapg.properties.account_status, str, schemas.Unset] = schemas.unset,
        name: typing.Union['Name2', schemas.Unset] = schemas.unset,
        phone_type: typing.Union['PhoneType2', schemas.Unset] = schemas.unset,
        phone_number: typing.Union['Phone2', schemas.Unset] = schemas.unset,
        birth_date: typing.Union['DateNoTime', schemas.Unset] = schemas.unset,
        tax_info: typing.Union['TaxInfo', schemas.Unset] = schemas.unset,
        address: typing.Union['AddressPortable2', schemas.Unset] = schemas.unset,
        attributes: typing.Union['PaypalWalletAttributesResponse', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaypalWalletResponse':
        return super().__new__(
            cls,
            *args,
            email_address=email_address,
            account_id=account_id,
            account_status=account_status,
            name=name,
            phone_type=phone_type,
            phone_number=phone_number,
            birth_date=birth_date,
            tax_info=tax_info,
            address=address,
            attributes=attributes,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.account_id2 import AccountId2
from pay_pal_checkout_python_sdk.model.address_portable2 import AddressPortable2
from pay_pal_checkout_python_sdk.model.date_no_time import DateNoTime
from pay_pal_checkout_python_sdk.model.email import Email
from pay_pal_checkout_python_sdk.model.name2 import Name2
from pay_pal_checkout_python_sdk.model.paypal_wallet_attributes_response import PaypalWalletAttributesResponse
from pay_pal_checkout_python_sdk.model.phone2 import Phone2
from pay_pal_checkout_python_sdk.model.phone_type2 import PhoneType2
from pay_pal_checkout_python_sdk.model.tax_info import TaxInfo
