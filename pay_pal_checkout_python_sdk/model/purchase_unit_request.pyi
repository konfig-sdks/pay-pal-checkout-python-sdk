# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class PurchaseUnitRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The purchase unit request. Includes required information for the payment contract.
    """


    class MetaOapg:
        required = {
            "amount",
        }
        
        class properties:
        
            @staticmethod
            def amount() -> typing.Type['AmountWithBreakdown']:
                return AmountWithBreakdown
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            
            
            class reference_id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def payee() -> typing.Type['Payee']:
                return Payee
        
            @staticmethod
            def payment_instruction() -> typing.Type['PaymentInstruction']:
                return PaymentInstruction
            
            
            class custom_id(
                schemas.StrSchema
            ):
                pass
            
            
            class invoice_id(
                schemas.StrSchema
            ):
                pass
            
            
            class soft_descriptor(
                schemas.StrSchema
            ):
                pass
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Item']:
                        return Item
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Item'], typing.List['Item']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Item':
                    return super().__getitem__(i)
        
            @staticmethod
            def shipping() -> typing.Type['ShippingDetail']:
                return ShippingDetail
        
            @staticmethod
            def supplementary_data() -> typing.Type['SupplementaryData']:
                return SupplementaryData
            __annotations__ = {
                "amount": amount,
                "description": description,
                "reference_id": reference_id,
                "payee": payee,
                "payment_instruction": payment_instruction,
                "custom_id": custom_id,
                "invoice_id": invoice_id,
                "soft_descriptor": soft_descriptor,
                "items": items,
                "shipping": shipping,
                "supplementary_data": supplementary_data,
            }
    
    amount: 'AmountWithBreakdown'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'AmountWithBreakdown': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_id"]) -> MetaOapg.properties.reference_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payee"]) -> 'Payee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_instruction"]) -> 'PaymentInstruction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_id"]) -> MetaOapg.properties.custom_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_id"]) -> MetaOapg.properties.invoice_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soft_descriptor"]) -> MetaOapg.properties.soft_descriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> 'ShippingDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supplementary_data"]) -> 'SupplementaryData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "description", "reference_id", "payee", "payment_instruction", "custom_id", "invoice_id", "soft_descriptor", "items", "shipping", "supplementary_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'AmountWithBreakdown': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_id"]) -> typing.Union[MetaOapg.properties.reference_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payee"]) -> typing.Union['Payee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_instruction"]) -> typing.Union['PaymentInstruction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_id"]) -> typing.Union[MetaOapg.properties.custom_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_id"]) -> typing.Union[MetaOapg.properties.invoice_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soft_descriptor"]) -> typing.Union[MetaOapg.properties.soft_descriptor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union['ShippingDetail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supplementary_data"]) -> typing.Union['SupplementaryData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "description", "reference_id", "payee", "payment_instruction", "custom_id", "invoice_id", "soft_descriptor", "items", "shipping", "supplementary_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'AmountWithBreakdown',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        reference_id: typing.Union[MetaOapg.properties.reference_id, str, schemas.Unset] = schemas.unset,
        payee: typing.Union['Payee', schemas.Unset] = schemas.unset,
        payment_instruction: typing.Union['PaymentInstruction', schemas.Unset] = schemas.unset,
        custom_id: typing.Union[MetaOapg.properties.custom_id, str, schemas.Unset] = schemas.unset,
        invoice_id: typing.Union[MetaOapg.properties.invoice_id, str, schemas.Unset] = schemas.unset,
        soft_descriptor: typing.Union[MetaOapg.properties.soft_descriptor, str, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        shipping: typing.Union['ShippingDetail', schemas.Unset] = schemas.unset,
        supplementary_data: typing.Union['SupplementaryData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PurchaseUnitRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            description=description,
            reference_id=reference_id,
            payee=payee,
            payment_instruction=payment_instruction,
            custom_id=custom_id,
            invoice_id=invoice_id,
            soft_descriptor=soft_descriptor,
            items=items,
            shipping=shipping,
            supplementary_data=supplementary_data,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.amount_with_breakdown import AmountWithBreakdown
from pay_pal_checkout_python_sdk.model.item import Item
from pay_pal_checkout_python_sdk.model.payee import Payee
from pay_pal_checkout_python_sdk.model.payment_instruction import PaymentInstruction
from pay_pal_checkout_python_sdk.model.shipping_detail import ShippingDetail
from pay_pal_checkout_python_sdk.model.supplementary_data import SupplementaryData
