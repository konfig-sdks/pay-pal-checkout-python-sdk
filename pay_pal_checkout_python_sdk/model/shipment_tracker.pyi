# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class ShipmentTracker(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The tracking information for a shipment.
    """


    class MetaOapg:
        required = {
            "transaction_id",
            "status",
        }
        
        class properties:
            
            
            class transaction_id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def status() -> typing.Type['ShipmentTrackingStatus']:
                return ShipmentTrackingStatus
            
            
            class tracking_number(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def tracking_number_type() -> typing.Type['ShipmentTrackingNumberType']:
                return ShipmentTrackingNumberType
        
            @staticmethod
            def shipment_date() -> typing.Type['DateNoTime']:
                return DateNoTime
        
            @staticmethod
            def carrier() -> typing.Type['ShipmentCarrier']:
                return ShipmentCarrier
            
            
            class carrier_name_other(
                schemas.StrSchema
            ):
                pass
            
            
            class postage_payment_id(
                schemas.StrSchema
            ):
                pass
            notify_buyer = schemas.BoolSchema
            
            
            class quantity(
                schemas.IntSchema
            ):
                pass
            tracking_number_validated = schemas.BoolSchema
        
            @staticmethod
            def last_updated_time() -> typing.Type['DateTime']:
                return DateTime
            
            
            class shipment_direction(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FORWARD(cls):
                    return cls("FORWARD")
                
                @schemas.classproperty
                def RETURN(cls):
                    return cls("RETURN")
            
            
            class shipment_uploader(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MERCHANT(cls):
                    return cls("MERCHANT")
                
                @schemas.classproperty
                def CONSUMER(cls):
                    return cls("CONSUMER")
                
                @schemas.classproperty
                def PARTNER(cls):
                    return cls("PARTNER")
            __annotations__ = {
                "transaction_id": transaction_id,
                "status": status,
                "tracking_number": tracking_number,
                "tracking_number_type": tracking_number_type,
                "shipment_date": shipment_date,
                "carrier": carrier,
                "carrier_name_other": carrier_name_other,
                "postage_payment_id": postage_payment_id,
                "notify_buyer": notify_buyer,
                "quantity": quantity,
                "tracking_number_validated": tracking_number_validated,
                "last_updated_time": last_updated_time,
                "shipment_direction": shipment_direction,
                "shipment_uploader": shipment_uploader,
            }
    
    transaction_id: MetaOapg.properties.transaction_id
    status: 'ShipmentTrackingStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ShipmentTrackingStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_number"]) -> MetaOapg.properties.tracking_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_number_type"]) -> 'ShipmentTrackingNumberType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_date"]) -> 'DateNoTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> 'ShipmentCarrier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_name_other"]) -> MetaOapg.properties.carrier_name_other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postage_payment_id"]) -> MetaOapg.properties.postage_payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify_buyer"]) -> MetaOapg.properties.notify_buyer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_number_validated"]) -> MetaOapg.properties.tracking_number_validated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> 'DateTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_direction"]) -> MetaOapg.properties.shipment_direction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipment_uploader"]) -> MetaOapg.properties.shipment_uploader: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_id", "status", "tracking_number", "tracking_number_type", "shipment_date", "carrier", "carrier_name_other", "postage_payment_id", "notify_buyer", "quantity", "tracking_number_validated", "last_updated_time", "shipment_direction", "shipment_uploader", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ShipmentTrackingStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_number"]) -> typing.Union[MetaOapg.properties.tracking_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_number_type"]) -> typing.Union['ShipmentTrackingNumberType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_date"]) -> typing.Union['DateNoTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union['ShipmentCarrier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_name_other"]) -> typing.Union[MetaOapg.properties.carrier_name_other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postage_payment_id"]) -> typing.Union[MetaOapg.properties.postage_payment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify_buyer"]) -> typing.Union[MetaOapg.properties.notify_buyer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_number_validated"]) -> typing.Union[MetaOapg.properties.tracking_number_validated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union['DateTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_direction"]) -> typing.Union[MetaOapg.properties.shipment_direction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipment_uploader"]) -> typing.Union[MetaOapg.properties.shipment_uploader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_id", "status", "tracking_number", "tracking_number_type", "shipment_date", "carrier", "carrier_name_other", "postage_payment_id", "notify_buyer", "quantity", "tracking_number_validated", "last_updated_time", "shipment_direction", "shipment_uploader", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, ],
        status: 'ShipmentTrackingStatus',
        tracking_number: typing.Union[MetaOapg.properties.tracking_number, str, schemas.Unset] = schemas.unset,
        tracking_number_type: typing.Union['ShipmentTrackingNumberType', schemas.Unset] = schemas.unset,
        shipment_date: typing.Union['DateNoTime', schemas.Unset] = schemas.unset,
        carrier: typing.Union['ShipmentCarrier', schemas.Unset] = schemas.unset,
        carrier_name_other: typing.Union[MetaOapg.properties.carrier_name_other, str, schemas.Unset] = schemas.unset,
        postage_payment_id: typing.Union[MetaOapg.properties.postage_payment_id, str, schemas.Unset] = schemas.unset,
        notify_buyer: typing.Union[MetaOapg.properties.notify_buyer, bool, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tracking_number_validated: typing.Union[MetaOapg.properties.tracking_number_validated, bool, schemas.Unset] = schemas.unset,
        last_updated_time: typing.Union['DateTime', schemas.Unset] = schemas.unset,
        shipment_direction: typing.Union[MetaOapg.properties.shipment_direction, str, schemas.Unset] = schemas.unset,
        shipment_uploader: typing.Union[MetaOapg.properties.shipment_uploader, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShipmentTracker':
        return super().__new__(
            cls,
            *args,
            transaction_id=transaction_id,
            status=status,
            tracking_number=tracking_number,
            tracking_number_type=tracking_number_type,
            shipment_date=shipment_date,
            carrier=carrier,
            carrier_name_other=carrier_name_other,
            postage_payment_id=postage_payment_id,
            notify_buyer=notify_buyer,
            quantity=quantity,
            tracking_number_validated=tracking_number_validated,
            last_updated_time=last_updated_time,
            shipment_direction=shipment_direction,
            shipment_uploader=shipment_uploader,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.date_no_time import DateNoTime
from pay_pal_checkout_python_sdk.model.date_time import DateTime
from pay_pal_checkout_python_sdk.model.shipment_carrier import ShipmentCarrier
from pay_pal_checkout_python_sdk.model.shipment_tracking_number_type import ShipmentTrackingNumberType
from pay_pal_checkout_python_sdk.model.shipment_tracking_status import ShipmentTrackingStatus
