# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class StoredPaymentSource(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/><ul><li>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`.</li><li>`previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`.</li><li>Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.</li></ul>
    """


    class MetaOapg:
        required = {
            "payment_type",
            "payment_initiator",
        }
        
        class properties:
        
            @staticmethod
            def payment_initiator() -> typing.Type['PaymentInitiator']:
                return PaymentInitiator
        
            @staticmethod
            def payment_type() -> typing.Type['StoredPaymentSourcePaymentType']:
                return StoredPaymentSourcePaymentType
        
            @staticmethod
            def usage() -> typing.Type['StoredPaymentSourceUsageType']:
                return StoredPaymentSourceUsageType
        
            @staticmethod
            def previous_network_transaction_reference() -> typing.Type['NetworkTransactionReference']:
                return NetworkTransactionReference
            __annotations__ = {
                "payment_initiator": payment_initiator,
                "payment_type": payment_type,
                "usage": usage,
                "previous_network_transaction_reference": previous_network_transaction_reference,
            }
    
    payment_type: 'StoredPaymentSourcePaymentType'
    payment_initiator: 'PaymentInitiator'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_initiator"]) -> 'PaymentInitiator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_type"]) -> 'StoredPaymentSourcePaymentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'StoredPaymentSourceUsageType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previous_network_transaction_reference"]) -> 'NetworkTransactionReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payment_initiator", "payment_type", "usage", "previous_network_transaction_reference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_initiator"]) -> 'PaymentInitiator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_type"]) -> 'StoredPaymentSourcePaymentType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['StoredPaymentSourceUsageType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previous_network_transaction_reference"]) -> typing.Union['NetworkTransactionReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payment_initiator", "payment_type", "usage", "previous_network_transaction_reference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payment_type: 'StoredPaymentSourcePaymentType',
        payment_initiator: 'PaymentInitiator',
        usage: typing.Union['StoredPaymentSourceUsageType', schemas.Unset] = schemas.unset,
        previous_network_transaction_reference: typing.Union['NetworkTransactionReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StoredPaymentSource':
        return super().__new__(
            cls,
            *args,
            payment_type=payment_type,
            payment_initiator=payment_initiator,
            usage=usage,
            previous_network_transaction_reference=previous_network_transaction_reference,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.network_transaction_reference import NetworkTransactionReference
from pay_pal_checkout_python_sdk.model.payment_initiator import PaymentInitiator
from pay_pal_checkout_python_sdk.model.stored_payment_source_payment_type import StoredPaymentSourcePaymentType
from pay_pal_checkout_python_sdk.model.stored_payment_source_usage_type import StoredPaymentSourceUsageType
