# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class TaxInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
    """


    class MetaOapg:
        required = {
            "tax_id_type",
            "tax_id",
        }
        
        class properties:
            
            
            class tax_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 14
                    min_length = 1
                    regex=[{
                        'pattern': r'([a-zA-Z0-9])',
                    }]
            
            
            class tax_id_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 14
                    min_length = 1
                    regex=[{
                        'pattern': r'^[A-Z0-9_]+$',
                    }]
                    enum_value_to_name = {
                        "BR_CPF": "CPF",
                        "BR_CNPJ": "CNPJ",
                    }
                
                @schemas.classproperty
                def CPF(cls):
                    return cls("BR_CPF")
                
                @schemas.classproperty
                def CNPJ(cls):
                    return cls("BR_CNPJ")
            __annotations__ = {
                "tax_id": tax_id,
                "tax_id_type": tax_id_type,
            }
    
    tax_id_type: MetaOapg.properties.tax_id_type
    tax_id: MetaOapg.properties.tax_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_id_type"]) -> MetaOapg.properties.tax_id_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tax_id", "tax_id_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_id"]) -> MetaOapg.properties.tax_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_id_type"]) -> MetaOapg.properties.tax_id_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tax_id", "tax_id_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tax_id_type: typing.Union[MetaOapg.properties.tax_id_type, str, ],
        tax_id: typing.Union[MetaOapg.properties.tax_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaxInfo':
        return super().__new__(
            cls,
            *args,
            tax_id_type=tax_id_type,
            tax_id=tax_id,
            _configuration=_configuration,
            **kwargs,
        )
