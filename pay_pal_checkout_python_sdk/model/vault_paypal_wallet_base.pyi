# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_checkout_python_sdk import schemas  # noqa: F401


class VaultPaypalWalletBase(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Resource consolidating common request and response attributes for vaulting PayPal Wallet.
    """


    class MetaOapg:
        required = {
            "usage_type",
        }
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class description(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class usage_pattern(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def IMMEDIATE(cls):
                            return cls("IMMEDIATE")
                        
                        @schemas.classproperty
                        def DEFERRED(cls):
                            return cls("DEFERRED")
                        
                        @schemas.classproperty
                        def RECURRING_PREPAID(cls):
                            return cls("RECURRING_PREPAID")
                        
                        @schemas.classproperty
                        def RECURRING_POSTPAID(cls):
                            return cls("RECURRING_POSTPAID")
                        
                        @schemas.classproperty
                        def THRESHOLD_PREPAID(cls):
                            return cls("THRESHOLD_PREPAID")
                        
                        @schemas.classproperty
                        def THRESHOLD_POSTPAID(cls):
                            return cls("THRESHOLD_POSTPAID")
                
                    @staticmethod
                    def shipping() -> typing.Type['ShippingDetail']:
                        return ShippingDetail
                    
                    
                    class usage_type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def MERCHANT(cls):
                            return cls("MERCHANT")
                        
                        @schemas.classproperty
                        def PLATFORM(cls):
                            return cls("PLATFORM")
                    owner_id = schemas.AnyTypeSchema
                    
                    
                    class customer_type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def CONSUMER(cls):
                            return cls("CONSUMER")
                        
                        @schemas.classproperty
                        def BUSINESS(cls):
                            return cls("BUSINESS")
                    permit_multiple_payment_tokens = schemas.BoolSchema
                    __annotations__ = {
                        "description": description,
                        "usage_pattern": usage_pattern,
                        "shipping": shipping,
                        "usage_type": usage_type,
                        "owner_id": owner_id,
                        "customer_type": customer_type,
                        "permit_multiple_payment_tokens": permit_multiple_payment_tokens,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usage_pattern"]) -> MetaOapg.properties.usage_pattern: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> 'ShippingDetail': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usage_type"]) -> MetaOapg.properties.usage_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["customer_type"]) -> MetaOapg.properties.customer_type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["permit_multiple_payment_tokens"]) -> MetaOapg.properties.permit_multiple_payment_tokens: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "usage_pattern", "shipping", "usage_type", "owner_id", "customer_type", "permit_multiple_payment_tokens", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usage_pattern"]) -> typing.Union[MetaOapg.properties.usage_pattern, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union['ShippingDetail', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usage_type"]) -> typing.Union[MetaOapg.properties.usage_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["customer_type"]) -> typing.Union[MetaOapg.properties.customer_type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["permit_multiple_payment_tokens"]) -> typing.Union[MetaOapg.properties.permit_multiple_payment_tokens, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "usage_pattern", "shipping", "usage_type", "owner_id", "customer_type", "permit_multiple_payment_tokens", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                usage_pattern: typing.Union[MetaOapg.properties.usage_pattern, str, schemas.Unset] = schemas.unset,
                shipping: typing.Union['ShippingDetail', schemas.Unset] = schemas.unset,
                usage_type: typing.Union[MetaOapg.properties.usage_type, str, schemas.Unset] = schemas.unset,
                owner_id: typing.Union[MetaOapg.properties.owner_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                customer_type: typing.Union[MetaOapg.properties.customer_type, str, schemas.Unset] = schemas.unset,
                permit_multiple_payment_tokens: typing.Union[MetaOapg.properties.permit_multiple_payment_tokens, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    usage_pattern=usage_pattern,
                    shipping=shipping,
                    usage_type=usage_type,
                    owner_id=owner_id,
                    customer_type=customer_type,
                    permit_multiple_payment_tokens=permit_multiple_payment_tokens,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                VaultInstructionBase,
                cls.all_of_1,
            ]

    
    usage_type: schemas.AnyTypeSchema

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VaultPaypalWalletBase':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_checkout_python_sdk.model.shipping_detail import ShippingDetail
from pay_pal_checkout_python_sdk.model.vault_instruction_base import VaultInstructionBase
