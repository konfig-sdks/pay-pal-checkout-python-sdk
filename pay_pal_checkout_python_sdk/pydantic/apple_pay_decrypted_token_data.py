# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_checkout_python_sdk.pydantic.apple_pay_payment_data import ApplePayPaymentData
from pay_pal_checkout_python_sdk.pydantic.card import Card
from pay_pal_checkout_python_sdk.pydantic.money2 import Money2

class ApplePayDecryptedTokenData(BaseModel):
    tokenized_card: Card = Field(alias='tokenized_card')

    transaction_amount: typing.Optional[Money2] = Field(None, alias='transaction_amount')

    # Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.
    device_manufacturer_id: typing.Optional[str] = Field(None, alias='device_manufacturer_id')

    # Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.
    payment_data_type: typing.Optional[Literal["3DSECURE", "EMV"]] = Field(None, alias='payment_data_type')

    payment_data: typing.Optional[ApplePayPaymentData] = Field(None, alias='payment_data')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
