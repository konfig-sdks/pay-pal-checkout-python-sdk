# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_checkout_python_sdk.pydantic.apple_pay_decrypted_token_data import ApplePayDecryptedTokenData
from pay_pal_checkout_python_sdk.pydantic.card_stored_credential import CardStoredCredential
from pay_pal_checkout_python_sdk.pydantic.email_address import EmailAddress
from pay_pal_checkout_python_sdk.pydantic.full_name import FullName
from pay_pal_checkout_python_sdk.pydantic.phone import Phone
from pay_pal_checkout_python_sdk.pydantic.vault_id import VaultId

class ApplePayRequest(BaseModel):
    # ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.
    id: typing.Optional[str] = Field(None, alias='id')

    name: typing.Optional[FullName] = Field(None, alias='name')

    email_address: typing.Optional[EmailAddress] = Field(None, alias='email_address')

    phone_number: typing.Optional[Phone] = Field(None, alias='phone_number')

    decrypted_token: typing.Optional[ApplePayDecryptedTokenData] = Field(None, alias='decrypted_token')

    stored_credential: typing.Optional[CardStoredCredential] = Field(None, alias='stored_credential')

    vault_id: typing.Optional[VaultId] = Field(None, alias='vault_id')

    attributes: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='attributes')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
