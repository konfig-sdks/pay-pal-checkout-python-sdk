# coding: utf-8

"""
    Orders

    An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

    The version of the OpenAPI document: 2.13
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_checkout_python_sdk.pydantic.authentication_response import AuthenticationResponse
from pay_pal_checkout_python_sdk.pydantic.bin_details import BinDetails
from pay_pal_checkout_python_sdk.pydantic.card_attributes_response import CardAttributesResponse
from pay_pal_checkout_python_sdk.pydantic.card_brand import CardBrand
from pay_pal_checkout_python_sdk.pydantic.card_from_request import CardFromRequest
from pay_pal_checkout_python_sdk.pydantic.date_year_month import DateYearMonth

class CardResponse(BaseModel):
    # The card holder's name as it appears on the card.
    name: typing.Optional[str] = Field(None, alias='name')

    # The last digits of the payment card.
    last_digits: typing.Optional[str] = Field(None, alias='last_digits')

    brand: typing.Optional[CardBrand] = Field(None, alias='brand')

    # Array of brands or networks associated with the card.
    available_networks: typing.Optional[typing.List[CardBrand]] = Field(None, alias='available_networks')

    # The payment card type.
    type: typing.Optional[Literal["CREDIT", "DEBIT", "PREPAID", "UNKNOWN"]] = Field(None, alias='type')

    authentication_result: typing.Optional[AuthenticationResponse] = Field(None, alias='authentication_result')

    attributes: typing.Optional[CardAttributesResponse] = Field(None, alias='attributes')

    from_request: typing.Optional[CardFromRequest] = Field(None, alias='from_request')

    expiry: typing.Optional[DateYearMonth] = Field(None, alias='expiry')

    bin_details: typing.Optional[BinDetails] = Field(None, alias='bin_details')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
